/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SkeletonImport } from './routes/skeleton'
import { Route as PopoverImport } from './routes/popover'
import { Route as PaginationImport } from './routes/pagination'
import { Route as ModalImport } from './routes/modal'
import { Route as ContactusImport } from './routes/contactus'
import { Route as AlertImport } from './routes/alert'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SkeletonRoute = SkeletonImport.update({
  id: '/skeleton',
  path: '/skeleton',
  getParentRoute: () => rootRoute,
} as any)

const PopoverRoute = PopoverImport.update({
  id: '/popover',
  path: '/popover',
  getParentRoute: () => rootRoute,
} as any)

const PaginationRoute = PaginationImport.update({
  id: '/pagination',
  path: '/pagination',
  getParentRoute: () => rootRoute,
} as any)

const ModalRoute = ModalImport.update({
  id: '/modal',
  path: '/modal',
  getParentRoute: () => rootRoute,
} as any)

const ContactusRoute = ContactusImport.update({
  id: '/contactus',
  path: '/contactus',
  getParentRoute: () => rootRoute,
} as any)

const AlertRoute = AlertImport.update({
  id: '/alert',
  path: '/alert',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/alert': {
      id: '/alert'
      path: '/alert'
      fullPath: '/alert'
      preLoaderRoute: typeof AlertImport
      parentRoute: typeof rootRoute
    }
    '/contactus': {
      id: '/contactus'
      path: '/contactus'
      fullPath: '/contactus'
      preLoaderRoute: typeof ContactusImport
      parentRoute: typeof rootRoute
    }
    '/modal': {
      id: '/modal'
      path: '/modal'
      fullPath: '/modal'
      preLoaderRoute: typeof ModalImport
      parentRoute: typeof rootRoute
    }
    '/pagination': {
      id: '/pagination'
      path: '/pagination'
      fullPath: '/pagination'
      preLoaderRoute: typeof PaginationImport
      parentRoute: typeof rootRoute
    }
    '/popover': {
      id: '/popover'
      path: '/popover'
      fullPath: '/popover'
      preLoaderRoute: typeof PopoverImport
      parentRoute: typeof rootRoute
    }
    '/skeleton': {
      id: '/skeleton'
      path: '/skeleton'
      fullPath: '/skeleton'
      preLoaderRoute: typeof SkeletonImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/alert': typeof AlertRoute
  '/contactus': typeof ContactusRoute
  '/modal': typeof ModalRoute
  '/pagination': typeof PaginationRoute
  '/popover': typeof PopoverRoute
  '/skeleton': typeof SkeletonRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/alert': typeof AlertRoute
  '/contactus': typeof ContactusRoute
  '/modal': typeof ModalRoute
  '/pagination': typeof PaginationRoute
  '/popover': typeof PopoverRoute
  '/skeleton': typeof SkeletonRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/alert': typeof AlertRoute
  '/contactus': typeof ContactusRoute
  '/modal': typeof ModalRoute
  '/pagination': typeof PaginationRoute
  '/popover': typeof PopoverRoute
  '/skeleton': typeof SkeletonRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/alert'
    | '/contactus'
    | '/modal'
    | '/pagination'
    | '/popover'
    | '/skeleton'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/alert'
    | '/contactus'
    | '/modal'
    | '/pagination'
    | '/popover'
    | '/skeleton'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/alert'
    | '/contactus'
    | '/modal'
    | '/pagination'
    | '/popover'
    | '/skeleton'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AlertRoute: typeof AlertRoute
  ContactusRoute: typeof ContactusRoute
  ModalRoute: typeof ModalRoute
  PaginationRoute: typeof PaginationRoute
  PopoverRoute: typeof PopoverRoute
  SkeletonRoute: typeof SkeletonRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AlertRoute: AlertRoute,
  ContactusRoute: ContactusRoute,
  ModalRoute: ModalRoute,
  PaginationRoute: PaginationRoute,
  PopoverRoute: PopoverRoute,
  SkeletonRoute: SkeletonRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/alert",
        "/contactus",
        "/modal",
        "/pagination",
        "/popover",
        "/skeleton"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/alert": {
      "filePath": "alert.tsx"
    },
    "/contactus": {
      "filePath": "contactus.tsx"
    },
    "/modal": {
      "filePath": "modal.tsx"
    },
    "/pagination": {
      "filePath": "pagination.tsx"
    },
    "/popover": {
      "filePath": "popover.tsx"
    },
    "/skeleton": {
      "filePath": "skeleton.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
